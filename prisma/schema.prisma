generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model client {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String   @db.VarChar(255)
  visa_application_status String   @db.VarChar(50)
  required_documents      String?  @db.VarChar(255)
  visa_consultant_id      String   @db.Uuid
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @default(now()) @db.Timestamp(6)
  user                    user     @relation(fields: [visa_consultant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course_offering {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar(255)
  instructor_id   String        @db.Uuid
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user            user          @relation(fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization    organization  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lesson_plan     lesson_plan[]
}

model lesson_plan {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String          @db.VarChar(255)
  course_offering_id String          @db.Uuid
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @default(now()) @db.Timestamp(6)
  course_offering    course_offering @relation(fields: [course_offering_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?           @db.VarChar(255)
  image           String?           @db.VarChar(255)
  name            String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user_id         String            @db.Uuid
  tenant_id       String            @db.VarChar(255)
  course_offering course_offering[]
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  client          client[]
  course_offering course_offering[]
  organization    organization[]
}
